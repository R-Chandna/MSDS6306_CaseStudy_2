install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("twitteR")
library(httr)
library(twitteR)
library(httr)
library(twitteR)
?twitteR
??twitteR
?httr
twitteRsearch("Pafford")
consumer_key <- "VLcHseIWewvZlEpjQp0Nmflki"
consumer_secret <- "F5x7EQZzwBQ9zBqjNvEKCSb7pAPrQz4zoG12W2bSxI5MnCNIT8"
access_token <- "	2590779812-zyxcRBhNtRkmGhhjF0hXlWE49ZlxFvAOOCaHOf3"
access_secret <- "uKAT9eKAc9YPjLGdxfFCZSjgtphRhosoP6ZTvkzCtXp85"
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
tw = twitteR::searchTwitter('#realDonaldTrump + #HillaryClinton', n = 1e4, since = '2016-11-08', retryOnRateLimit = 1e3)
d = twitteR::twListToDF(tw)
api_key <- 'VLcHseIWewvZlEpjQp0Nmflki'
api_secret <- 'F5x7EQZzwBQ9zBqjNvEKCSb7pAPrQz4zoG12W2bSxI5MnCNIT8'
access_token <- "2590779812-zyxcRBhNtRkmGhhjF0hXlWE49ZlxFvAOOCaHOf3"
access_token_secret <- "uKAT9eKAc9YPjLGdxfFCZSjgtphRhosoP6ZTvkzCtXp85"
setup_twitter_oauth(api_key, api_secret, access_token, access_token_secret)
?searchTwitter
tweets <- searchTwitter('CTCs', n=10, lang = 'en')
tweets
tweets <- searchTwitter('NISD CTCs', n=10, lang = 'en', since='2018-05-07', until='2018-05-18')
tweets
tweets <- searchTwitter('CTCs', n=10, lang = 'en', since='2018-05-07', until='2018-05-18')
tweets <- searchTwitter('CTCs', lang = 'en', since='2018-05-07', until='2018-05-18')
tweets <- searchTwitter('CTCs', lang = 'en', since='2018-05-01', until='2018-06-01')
tweets <- searchTwitter('Pafford', lang = 'en', since='2018-05-01', until='2018-06-01')
tweets <- searchTwitter('Pafford', lang = 'en')
tweets
tweets <- searchTwitter('NISD CTCs', n=10, lang = 'en')
tweets <- searchTwitter("#DataScience", n=10, lang = 'en')
tweets <- searchTwitter("#DataScience", n=10, lang = 'en', resultType="recent")
tweets
tweets2 <- searchTwitter("CTCs", lang='en', since = "2018-01-01")
tweets2 <- searchTwitter("CTCs", lang='en', since = "2018-01-01", resultType="recent")
tweets
tweets2
tweets <- searchTwitter("#DataScience$", lang = 'en', resultType="recent")
tweets
tweetsdf <- twListToDF(tweets)
tweets2df <- twListToDF(tweets2)
write.csv(tweetsdf, file=~/Desktop/tweets.csv, row.names=F)
write.csv(tweetsdf, file='~/Desktop/tweets.csv', row.names=F)
write.csv(tweetsdf, file='~/Desktop', row.names=F)
write.csv(tweets2df, file='~/Desktop', row.names=F)
tweets2df <- twListToDF(tweets2)
tweets2 <- searchTwitter("#DataScience" + "Salary", lang='en', since = "2018-01-01", resultType="recent")
tweets2 <- searchTwitter("#DataScience + Salary", lang='en', since = "2018-01-01", resultType="recent")
tweets <- searchTwitter("#DataScience", lang = 'en', since = "2018-01-01", resultType="recent")
tweets2 <- searchTwitter("#DataScience + Salary", lang='en', since = "2018-01-01", resultType="recent")
#Make in Data Frame
tweetsdf <- twListToDF(tweets)
tweets2df <- twListToDF(tweets2)
#Write CSV with these files
write.csv(tweetsdf, file='~/Desktop', row.names=F)
write.csv(tweets2df, file='~/Desktop', row.names=F)
head(tweetsdf)
head(tweets3df)
head(tweets2df)
tweets <- searchTwitter("#DataScience + Salary", lang='en')
#Make in Data Frame
tweetsdf <- twListToDF(tweets)
#View
tweets
#Change Something: Language
tweets2 <- searchTwitter("#DataScience + Salary", lang='span')
#Make in Data Frame
tweets2df <- twListToDF(tweets2)
#View
tweets2
#Libraries
library(httr)
library(twitteR)
#Set Consumer Key/Secret etc.
api_key <- 'VLcHseIWewvZlEpjQp0Nmflki'
api_secret <- 'F5x7EQZzwBQ9zBqjNvEKCSb7pAPrQz4zoG12W2bSxI5MnCNIT8'
access_token <- "2590779812-zyxcRBhNtRkmGhhjF0hXlWE49ZlxFvAOOCaHOf3"
access_token_secret <- "uKAT9eKAc9YPjLGdxfFCZSjgtphRhosoP6ZTvkzCtXp85"
setup_twitter_oauth(api_key, api_secret, access_token, access_token_secret)
#Initial Code
tweets <- searchTwitter("#DataScience + Salary", lang='en')
#View
tweets
#Change Something: Language
tweets2 <- searchTwitter("#DataScience + Salary", lang='sp')
#Make in Data Frame
tweets2df <- twListToDF(tweets2)
#View
tweets2
#Not used, but can make in a data frame.
tweetsdf <- twListToDF(tweets)
```
tweets2 <- searchTwitter("#DataScience + Salary", lang='spa')
tweets2 <- searchTwitter("#DataScience + Salary", lang='es')
tweets2 <- searchTwitter("#DataScience + Salary", lang='ar')
tweets2 <- searchTwitter("#DataScience + Salary", lang='zh')
tweets2 <- searchTwitter("#DataScience + Salary", lang='cs')
tweets2 <- searchTwitter("#DataScience + Salary", lang='nl')
tweets2 <- searchTwitter("#DataScience + Salary", lang='de')
tweets2 <- searchTwitter("DataScience + Salary", lang='de')
tweets2 <- searchTwitter("DataScience + Salary", lang='es')
tweets2 <- searchTwitter("DataScience", lang='es')
tweets2 <- searchTwitter("#DataScience", lang='es')
x <- c(1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5)
y <- c(4, 6, 5, 8, 6, 7, 9, 10, 11, 13, 15, 17, 20, 22, 27, 29, 34, 33, 38, 40)
gender <- factor(c(rep('Male', 10), rep('Female', 10)))
fake.data <- data.frame(x, y, gender)
plot(fake.data$x, fake.data$y, pch = c(2, 3)[as.numeric(fake.data$gender)],
col=c('red', 'blue')[as.numeric(fake.data$gender)], lwd=2,
xlab='x', ylab='y')
legend('topleft', c('Male', 'Female'), col=c('red', 'blue'), pch=c(2, 3),
lty=NULL, pt.lwd=2)
model1 <- lm(y ~ x + gender + x:gender, data=fake.data)
##Set male as the reference level:
fake.data2 <- within(fake.data, gender <- relevel(gender, ref = 'Male'))
model2 <- lm(y ~ x + gender + x:gender, data=fake.data2)
confint(model2)
par(mfrow=c(2,2))
plot(model2)
sresid <- rstudent(model2)
hist(sresid, freq=FALSE, main="Distribution of Studentized Residuals")
box()
xfit <- seq(min(sresid), max(sresid), length=40)
yfit <- dnorm(xfit)
lines(xfit, yfit, col='blue')
Mammals <- read.csv("C:/Users/jodip/Documents/SMU/Intro to Stats/Unit 12/Brain.csv", header=TRUE)
ggplot(df, aes(Age)) + geom_histogram(color = brewer.pal(11, "Spectral")[5], fill = brewer.pal(11, "Spectral")[4], bins = 30) + labs(title = "Employee's Ages", y = "Employees", x = "Years")
install.packages(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
ggplot(df, aes(Age)) + geom_histogram(color = brewer.pal(11, "Spectral")[5], fill = brewer.pal(11, "Spectral")[4], bins = 30) + labs(title = "Employee's Ages", y = "Employees", x = "Years")
df <- read_excel(path = "C:/Users/jodip/Documents/JPafford_DDS/MSDS6306_CaseStudy_2/Attrition_Data_Clean.xlsx", sheet = "HR-employee-attrition Data")
library(readxl)
df <- read_excel(path = "C:/Users/jodip/Documents/JPafford_DDS/MSDS6306_CaseStudy_2/Attrition_Data_Clean.xlsx", sheet = "HR-employee-attrition Data")
ggplot(df, aes(Age)) + geom_histogram(color = brewer.pal(11, "Spectral")[5], fill = brewer.pal(11, "Spectral")[4], bins = 30) + labs(title = "Employee's Ages", y = "Employees", x = "Years")
library(RColorBrewer)
ggplot(df, aes(Age)) + geom_histogram(color = brewer.pal(11, "Spectral")[5], fill = brewer.pal(11, "Spectral")[4], bins = 30) + labs(title = "Employee's Ages", y = "Employees", x = "Years")
ggplot(df, aes(MonthlyInco)) + geom_histogram(color = brewer.pal(11, "Spectral")[5], fill = brewer.pal(11, "Spectral")[4], bins = 30) + labs(title = "Monthly Income", y = "Employees", x = "USD")
ggplot(JobRoleTable, aes(reorder(x=row.names(JobRoleTable), -Freq), y=Freq)) + geom_bar(stat = "identity", aes(fill = row.names(JobRoleTable))) + labs(title = "Employees per Job Role", y = "Number of Employees", x = "") + theme(axis.text.x = element_text(angle = 15, hjust = 1), legend.position="none") + scale_fill_brewer(palette="Spectral")
library(readxl)
library(ggplot2)
df <- read_excel(path = "Attrition_Data_Clean.xlsx", sheet = "HR-employee-attrition Data")
setwd("~/")
setwd("~/JPafford_DDS/MSDS6306_CaseStudy_2")
df <- read_excel(path = "Attrition_Data_Clean.xlsx", sheet = "HR-employee-attrition Data")
summary(df)
ggplot(df, aes(x = PctSalaryInc, fill = Attrition)) + geom_bar(position = "fill") + labs(title = "Percent Salary Increase", x = "Salary Increase (%)", y = "", color = "")+ scale_y_continuous(labels = scales::percent)
ggplot(df, aes(x = EducationField, fill = Attrition)) + geom_bar(position = "fill") + labs(title = "Field of Education", x = "Field of Education", y = "", color = "")+ scale_y_continuous(labels = scales::percent)
ggplot(df, aes(x = FieldofStudy, fill = Attrition)) + geom_bar(position = "fill") + labs(title = "Field of Study", x = "Field of Study", y = "", color = "")+ scale_y_continuous(labels = scales::percent)
ggplot(df, aes(x = FieldOfStudy, fill = Attrition)) + geom_bar(position = "fill") + labs(title = "Field of Study", x = "Field of Study", y = "", color = "")+ scale_y_continuous(labels = scales::percent)
ggplot(df, aes(x = Education, fill = Attrition)) + geom_bar(position = "fill") + labs(title = "Highest Level of Education", x = "Education Level", y = "", color = "")+ scale_y_continuous(labels = scales::percent)
Level <- lm(df$Education ~ df$Attrition)
summary(Level)
library(readxl)
library(ggplot2)
library(readxl)
library(ggplot2)
df <- read_excel(path = "Attrition_Data_Clean.xlsx", sheet = "HR-employee-attrition Data")
ggplot(df, aes(x = Education, fill = Attrition)) + geom_bar(position = "fill") + labs(title = "Highest Level of Education", x = "Education Level", y = "", color = "")+ scale_y_continuous(labels = scales::percent)
Level <- lm(df$Education ~ df$Attrition)
summary(Level)
ggplot(EDA, aes(x = JobRole, fill = Attrition)) + geom_bar(position = "fill") + labs(title = "Job Role", x = "Job Role", y = "", color = "")+ scale_y_continuous(labels = scales::percent)+theme(axis.text.x = element_text(angle = 90))
ggplot(df, aes(x = JobRole, fill = Attrition)) + geom_bar(position = "fill") + labs(title = "Job Role", x = "Job Role", y = "", color = "")+ scale_y_continuous(labels = scales::percent)+theme(axis.text.x = element_text(angle = 90))
ggplot(df, aes(x = JobRole, fill = Attrition)) + geom_bar(position = "fill") + labs(title = "Job Role", x = "Job Role", y = "", color = "")+ scale_y_continuous(labels = scales::percent)+theme(axis.text.x = element_text(angle = 90))+geom_text(aes(label=len), vjust=1.6, color="white", size=2)
ggplot(df, aes(x = JobRole, fill = Attrition)) + geom_bar(position = "fill") + labs(title = "Job Role", x = "Job Role", y = "", color = "")+ scale_y_continuous(labels = scales::percent)+theme(axis.text.x = element_text(angle = 90))+geom_text(aes(label=JobRole), vjust=1.6, color="white", size=2)
ggplot(df, aes(x = JobRole, fill = Attrition)) + geom_bar(position = "fill") + labs(title = "Job Role", x = "Job Role", y = "", color = "")+ scale_y_continuous(labels = scales::percent)+theme(axis.text.x = element_text(angle = 90))+geom_text(aes(label=Attrition), vjust=1.6, color="white", size=2)
ggplot(df, aes(x = JobRole, fill = Attrition)) + geom_bar(position = "fill") + labs(title = "Job Role", x = "Job Role", y = "", color = "")+ scale_y_continuous(labels = scales::percent)+theme(axis.text.x = element_text(angle = 90))+geom_text(aes(label=percent), vjust=1.6, color="white", size=2)
ggplot(df, aes(x = JobRole, fill = Attrition)) + geom_bar(position = "fill") + labs(title = "Job Role", x = "Job Role", y = "", color = "")+ scale_y_continuous(labels = scales::percent)+theme(axis.text.x = element_text(angle = 90))+geom_text(aes(label=scales::percent), vjust=1.6, color="white", size=2)
table(attritionDF$Gender)
# In order to import XLSX, we install the package "readxl" into our environment.  After loading library "readxl" we're able to use read_excel function to import the sheet "HR-employee-attrition Data" into a dataframe.
library(ggplot2)
library(readxl)
library(randomForest)
library(stringr)
library(dplyr)
library(tidyr)
library(xlsx)
library(reshape2)
library(party)
library(gmodels)
library(vcd)
library(caret)
library(e1071)
library(tm)
library(SnowballC)
library(wordcloud)
library(RColorBrewer)
sessionInfo()
attritionDF <- read_excel(path = "Attrition_Data_Clean.xlsx", sheet = "HR-employee-attrition Data")
#1a	Tori: The client wants this to be reproducible and know exactly what you did.  There needs to be an informative Readme, complete with several sections, as referenced in Live Session.  Give contact information, session Info, and the objective of the repo at least.
#1a: The README WILL be updated to look pretty and have the basic introduction to everything. **Tori**
#1b	An: You have a large data set, and it needs its own Codebook, formatted in an approachable way.  Make sure you describe peculiarities of the data by variable and what needs transforming.  However, do not make it too long either.
#1b: The codebook WILL BE added as a separate file and to the README - **AN**
#1c	Rajat: Create a file structure that is accessible and transparent.  Document it in the root directory, ideally in the Readme.
#1c: A clearly understandable directory WILL BE created and documented in the README **RAJAT**
library(stringr)
# 2A - a	Read the csv into R and take a look at the data set.  Output how many rows and columns the data.frame is.
# There are 1470 rows (observations) and 35 columns (variables)
dimDF <- dim(attritionDF)
names(dimDF) <- c("Rows", "Columns")
dimDF
# 2B - b	The column names are either too much or not enough.  Change the column names so that they do not have spaces, underscores, slashes, and the like. All column names should be under 12 characters. Make sure youâre updating your codebook with information on the tidied data set as well.
# Results of column names and its string length count.
## Need to find a more elegant function to filter the list and subset only values greater than 12.  For now, this will suffice.
lettercount <- str_length(names(attritionDF))
countDF <- data.frame(cbind(names(attritionDF), lettercount))
names(countDF) <- c("Variable", "LetterCount")
countDF
# Replacing Original Variable names that have > 12 characters with new names under the Working column in Attrition_Col_Name_New.csv.
original <- names(attritionDF)
write.csv(original, "Attrition_Col_Name_Old.csv")
head(names(attritionDF))
colNamesDF <- read.csv("Attrition_Col_Name_New.csv")
working <- colNamesDF$Working
names(attritionDF) <- working
head(names(attritionDF))
# 2C - Due to Qualtrics, the following columns will have its integer value replaced by the definitions provided in the "Data Definitions" sheet.
## Will need to seperate the integer and characters into two seperate columns.
datadefDF <- read_excel ("CaseStudy2-data.xlsx", "Data Definitions")
datadefDF
# 2D - d	Make sure your columns are the proper data types (i.e., numeric, character, etc.).  If they are incorrect, convert them.
# Verifying the columns class type are numeric and character.
as.matrix(lapply(attritionDF, class))
table(attritionDF$Gender)
sort(unique(attritionDF$JobRole))
table(attritionDF$Department)
#3c. Give the frequencies (in table format or similar) for Gender, Education, and Occupation.  They can be separate tables, if that's your choice.
#Needs some refining
gendertable <- table(attritionDF$Gender)
gendertable
educationtable <- table(attritionDF$Education)
educationtable
occupationtable <- table(attritionDF$JobRole)
occupationtable
#3d. Give the counts (again, table) of management positions.
#Needs some refining
library(plyr)
management <- count(attritionDF$JobRole)
management <- management[management$x=="Manager",]
#3b - b	Please provide (in table format or similar), descriptive statistics on at least 7 variables (age, Income, etc.).  Create a simple histogram for two of them.  Comment on the shape of the distribution in your markdown.
# Create a table of summary statistics of Variables with numerical values
SummaryStat <- matrix(ncol = 6, nrow = 0)
SummaryStat <- rbind(SummaryStat, summary(attritionDF$MonthlyInco))
SummaryStat <- rbind(SummaryStat, summary(attritionDF$Age))
SummaryStat <- rbind(SummaryStat, summary(attritionDF$DistFromHome))
SummaryStat <- rbind(SummaryStat, summary(attritionDF$PctSalaryInc))
SummaryStat <- rbind(SummaryStat, summary(attritionDF$TotWorkExp))
SummaryStat <- rbind(SummaryStat, summary(attritionDF$YrsAtCompany))
SummaryStat <- rbind(SummaryStat, summary(attritionDF$NumPriorComp))
SummaryStat <- as.data.frame(SummaryStat)
row.names(SummaryStat) <- c("MonthlyInco", "Age", "DistFromHome", "PctSalarInc", "TotWorkExp", "YrsAtCompany", "NumPriorComp")
SummaryStat
#**ANDY** or **AN**, fill in the x's in this section, and edit the content to your heart's desire. Make sure to include the bar chart of age vs. attrition and the bar chart of income vs. attrition from the EDA. Include any relevant code in the code block below or wherever you see fit:
table(attritionDF$Attrition)
#Department
ggplot(attritionDF, aes(x = Department, fill = Attrition)) + geom_bar(position = "fill") + labs(title = "Attrition per Department", x = "", y = "", color = "") + scale_y_continuous(labels = scales::percent) + scale_fill_manual(values=c(brewer.pal(11, "Spectral")[3], brewer.pal(11, "Spectral")[10]))
tempDF <- attritionDF[,c("Attrition","Department")]
table(melt(tempDF))
#Age
ggplot(attritionDF, aes(x = Age, fill = Attrition)) + geom_histogram(position = "fill") + labs(title = "Attrition per Age Groups", x = "Age (years)", y = "", color = "") + scale_y_continuous(labels = scales::percent) + scale_fill_manual(values=c(brewer.pal(11, "Spectral")[3], brewer.pal(11, "Spectral")[10]))
#Income
ggplot(attritionDF, aes(x = MonthlyInco, fill = Attrition)) + geom_histogram(position = "fill") + labs(title = "Attrition per Monthly Income", x = "USD", y = "", color = "") + scale_y_continuous(labels = scales::percent) + scale_fill_manual(values=c(brewer.pal(11, "Spectral")[3], brewer.pal(11, "Spectral")[10]))
